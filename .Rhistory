#calculate summary stats for final pop
FIN = matrix(nrow=years+1, ncol=20)
colnames(FIN) = c("year", "popsize", "propmig", "He", "Ho", "Fis", "nadults", "sxratio", "nmig", "Fst", "replicate", "parameterset", "numboff", "FstVSource", "FisVSource", "deltaK", "propMigSNPs", "Ho_allSNPs", "project", "group")
#note that because this is for all years of the simulation, the initialized pop is not included in this (e.g., year 0)
#add year to summary matrix
#FIN[,1] = c(0:nrow(FIN))
f = 1
#for(f in 1:nrow(FIN)){
#year = FIN[f,1] #-1 #doing this cuz also taking year 0 -- note that on 5/2/22 there were still errors with numbering on column 1
FIN[f,1] <- y
FIN[f,16] <- K
#separate out alive in current year -- Janna did these from year born and year died column
data = alive[alive[,8]>0, , drop = FALSE]
x=NULL
x = try(length(data[,1]), silent=TRUE)
if(is.null(x)){break}
if(x<1){break}
if(!is.numeric(x)){break}
#number of indv
FIN[f,2] = nrow(data)
#proportion migrants in population
FIN[f,3] =  sum(data[,2]==-1)/length(data[,1])   #1 - sum(data[,2]==-1)/length(data[,1])
#proportion of migrant genotypes in population
FIN[f,17] <- mean(data[,12])
#He and Ho - neutral (?)
SNPS = (nSNP*2) + (nSNP.mig*2) + (nSNP.cons*2)
genotype = data[, -c(ncol(data)-SNPS:ncol(data))] #THERE IS AN ERROR HERE THAT IS CHANGING THE ORDER OF COLUMNS?? ALSO NOTE THAT THE NUMBER OF SNPS IS WRONG--PROBS CUZ OF NOT RUNNING THE DIFFERENT TYPES IN RUNMODEL. FIX THIS~!
#snps = rep(c(1,2),ncol(genotype)/2)
HE = NULL
HO = NULL
loc.pos = seq(1, SNPS, 2)
for(lp in loc.pos){
#per locus heterozygostiy
locus <- genotype[, c(lp, lp+1), drop=FALSE]
#NOTE this includes MigSNPS while the other het value does not
geno  <- length(locus[,1])
het   <- length(which(locus[,1] != locus[,2]))
het.observed <- het/geno
HO = c(HO, het.observed)
freqs <- table(locus)
homozygous = NULL
for(v in 1:length(freqs)){
homozygous = c(homozygous, (freqs[v]/sum(freqs)*freqs[v]/sum(freqs)))
}
het.expected <- 1 - sum(homozygous)
HE = c(HE, het.expected)
}
FIN[f,4] <- mean(HE)
FIN[f,5] <- mean(data[,11])
FIN[f,18] <- mean(HO)
#find number of adults per year
adults = data[data[,4]>= maturity, , drop = FALSE]
FIN[f,7] = nrow(adults)
########################################NEW####################################3
#find the sex ratio
FIN[f,8] = mean(data[,'sex']) #<0.5 female, >.5 male
#note this includes babies
#note number of migrants
if(y != 0){
FIN[f,9] = mig  #generated in Migrate.R, passed to RunModel.R, and passed here in Analyze.R
}else{
FIN[f,9] = 0  #this is for year 0, there are no migrants in this pop
}
#calc the proportion of migrant alleles in the population
#do I want heterozygosity of mig alleles? or freq of mig alleles? or something different?
#?
#?
#?
#table function https://www.datasciencemadesimple.com/table-function-in-r/#:~:text=Table%20function%20in%20R%20-table%20%28%29%2C%20performs%20categorical,creating%20Frequency%20tables%20with%20condition%20and%20cross%20tabulations.
#LINKS FOR CALC FST USING HIERFSTAT
#https://rdrr.io/cran/hierfstat/
#https://rdrr.io/cran/hierfstat/#vignettes
#https://rdrr.io/cran/hierfstat/man/biall2dos.html
#https://rdrr.io/cran/hierfstat/man/fs.dosage.html
#https://rdrr.io/cran/hierfstat/man/fstat2dos.html
#https://rdrr.io/cran/hierfstat/man/nb.alleles.html
#https://rdrr.io/cran/hierfstat/man/pairwise.neifst.html
#https://rdrr.io/cran/hierfstat/man/pairwise.WCfst.html
#https://rdrr.io/cran/hierfstat/man/ppfst.html
#prepare the genotypes for hierfstat
SNPS = (nSNP*2) + (nSNP.mig*2) + (nSNP.cons*2)                    #find number of SNPs
fstdata <- data[, -c(ncol(data)-(SNPS):ncol(data))]               #grab SNPs
#change 0s to 2s for hierfstat to read
fstdata[fstdata[,]==0] <-2
#merge pos1 and pos2 into pos1, then remove pos2
fstdata[,pos1] <- as.numeric(paste(fstdata[,pos1], fstdata[,pos2], sep=""))
fstdata <- fstdata[,-c(pos2)]
#add pop identifier for calculations
popident <- matrix(nrow=nrow(fstdata), ncol=1)
popident[,1] = y
fstdata <- cbind(popident,fstdata)
if(y != 0){
#do the same to the initialized focal pop -- for comparison
#MOVEDTORUNMODEL##fstinit <- focalpop[, -c(ncol(focalpop)-(SNPS):ncol(focalpop))]               #grab SNPs
#MOVEDTORUNMODEL##fstinit[fstinit[,]==0] <-2                                                    #change 0s to 2s
#MOVEDTORUNMODEL##fstinit[,pos1] <- as.numeric(paste(fstinit[,pos1], fstinit[,pos2], sep=""))                     #merge SNPs
#MOVEDTORUNMODEL##fstinit <- fstinit[,-c(pos2)]                                                 #remove single pos2 SNPs
#MOVEDTORUNMODEL##initident <- matrix(nrow=nrow(fstinit), ncol=1)                               #add pop identifier
#MOVEDTORUNMODEL##initident[,1] = 0
#MOVEDTORUNMODEL##fstinit <- cbind(initident,fstinit)                                           #merge identifier and genotypes
fstnow <- rbind(fstdata, fstinit)                                            #merge current year and initialized year to one matrix for calculations
fstnow <- as.data.frame(fstnow)                                               #turn into a dataframe
calc <-wc(fstnow, diploid=TRUE, pol=0)                                         #calc FST and FIS
#calc <- pairwise.WCfst(fstdata,diploid=TRUE)                                   #calculate FST
FIN[f,10] <- calc$FST
FIN[f,6] <- calc$FIS
#do the same to the initialized source pop -- for comparison
#MOVEDTORUNMODEL##fstsource <- source1[, -c(ncol(source1)-(SNPS):ncol(source1))]                    #grab SNPs
#MOVEDTORUNMODEL##fstsource[fstsource[,]==0] <-2                                                    #change 0s to 2s
#MOVEDTORUNMODEL##fstsource[,pos1] <- as.numeric(paste(fstsource[,pos1], fstsource[,pos2], sep=""))                     #merge SNPs
#MOVEDTORUNMODEL##fstsource <- fstsource[,-c(pos2)]                                                 #remove single pos2 SNPs
#MOVEDTORUNMODEL##sourceident <- matrix(nrow=nrow(fstsource), ncol=1)                               #add pop identifier
#MOVEDTORUNMODEL##sourceident[,1] = -1
#MOVEDTORUNMODEL##fstsource <- cbind(sourceident,fstsource)                                         #merge identifier and genotypes
fstdatavsource <- rbind(fstdata, fstsource)                                              #merge current year and initialized year to one matrix for calculations
fstdatavsource <- as.data.frame(fstdatavsource)
calcvsource <-wc(fstdatavsource, diploid=TRUE, pol=0)
FIN[f,14] <- calcvsource$FST
#FIN[f,15] <- calcvsource$FIS
}
if(y == 0){
#do the same to the initialized source pop -- for comparison
#MOVEDTORUNMODEL##fstsource <- source1[, -c(ncol(source1)-(SNPS):ncol(source1))]                    #grab SNPs
#MOVEDTORUNMODEL##fstsource[fstsource[,]==0] <-2                                                    #change 0s to 2s
#MOVEDTORUNMODEL##fstsource[,pos1] <- as.numeric(paste(fstsource[,pos1], fstsource[,pos2], sep=""))                     #merge SNPs
#MOVEDTORUNMODEL##fstsource <- fstsource[,-c(pos2)]                                                 #remove single pos2 SNPs
#MOVEDTORUNMODEL##sourceident <- matrix(nrow=nrow(fstsource), ncol=1)                               #add pop identifier
#MOVEDTORUNMODEL##sourceident[,1] = -1
#MOVEDTORUNMODEL##fstsource <- cbind(sourceident,fstsource)                                         #merge identifier and genotypes
fstyo <- rbind(fstinit, fstsource) #merge current year and initialized year to one matrix for calculations
fstyo <- as.data.frame(fstyo)                                               #turn into a dataframe
calcyo <-wc(fstyo, diploid=TRUE, pol=0)                                         #calc FST and FIS
FIN[f,10] <- 0 #no divergence at y=0
FIN[f,6] <- 0  #no inbreeding at y=0
FIN[f,14] <- calcyo$FST
FIN[f,15] <- calcyo$FIS
remove(fstyo)
}
FIN[f,11] = rr   #add replicate number
FIN[f,12] = r    #add parameter set number
if(y == 0){
numboff = 0
}
FIN[f,13] = numboff
FIN[f,19] = prj
FIN[f,20] = grp
#Fis for this pop
#NOTES 4/18/22 -- consider another pairwise measure tha tmay work rather than FST. potentially the number of unique alleles??
#this could be because FST is not sensitive to minor changes because the scale is in evolutionary time
#may also want to add the number of variable SNPS (across indvs) since heterozy is within an indv
#ALSO add from meeting 4/18/22
#year 0 should be in this table >> look at the photo I took to see how to do this. in short, will want to ski[ to analyze in year 0 and then go through all timesteps]
#that way, year 0 will be in the same tbale and iwll make it easier to analyze for following years
#ALSO will want to add SNPs that are the SAME between pop and source so that we can seperate mutation, migration, and drift forces. think about this more.
#}
params = parameters[rep(r, nrow(FIN)),]
out = cbind(FIN,params)
colnames(out) = c("year", "popsize", "propmig", "He", "Ho", "Fis", "nadults", "sxratio", "nmig", "Fst", "replicate", "parameterset", "numboff", "FstVSource", "FisVSource", "deltaK", "propMigSNPs", "Ho_allSNPs", "project", "group",
"k", "nSNP", "miggy", "LBhet", "LBp", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
remove(alive, adults, data, FIN, fstdata, genotype, locus, params, popident,
freqs, geno, HE, het, het.expected, het.observed, HO, homozygous, loc.pos)
return(out)
}
#analyze each replicate
out = Analyze(parameters, r, pop, mig, fstinit, fstsource, y, rr, nSNP, nSNP.mig, nSNP.cons, numboff, K, pos1, pos2, prj, grp)
MateChoice = function(pop, sex, maturity){ #allee, matemigs
pop = pop[which(pop[,1]%NOTin%dead), , drop=FALSE]
immature  = pop[pop[,2 < 13, ,drop=FALSE]          #remove immature indvs
#find which sex has more, male or female.
ck = mean(pop[,'sex']) #<0.5 female, >.5 male
print(paste("the sex ratio is", ck))
if(ck == 1){
return()   ##ERROR HERE BECAUSE BREAK/NEXT ARENT IN A LOOP (if is not a loop)
}else if(ck == 0){
return() #break #next
}else{
# Set your desired ratio of males to females
male_ratio <- 0.3  # this would be a 30% males 70% females ratio which is what is found in the literature
# set parameters
#Calculate the number of males and females based on the desired ratio
num_males <- round(k * male_ratio) # It ensures that the result is a whole number.
num_females <- (k - num_males)
num_females <- 100  # Number of females
# Create a dataset representing individuals with age information
# Create the initial data frame
set.seed(123)  # Set a seed for reproducibility
num_individuals = popsize
mate <- data.frame(
ID = 1:num_individuals,
sex = sample(c(0,1), size= num_individuals, replace = TRUE),
age = sample(maturity:maxage, num_individuals, replace = TRUE),  # Assuming age ranges from 2 to 13, that the maturity and  max age respectively.
breed_perc = rep(0, num_individuals)  # Initialize breeding percentage to 0
)
# Step 2: Define rules for breeding percentage based on age
breed_rules <- function(pop, maxage, maturity, sex) {
if (sex == "male") {
return(0)  # Males do not contribute to breeding
} else {
# Define rules for females, e.g., increase breeding percentage with age
# You can customize this function based on your specific requirements
return(age * 5)  # Example: Breeding percentage increases by age * 5
}
}
# Step 3: Loop through ages and update breeding percentages
for(age in unique(pop$age)) {
for (sex in c("male", "female")) {
subset_df <- pop[pop$age == age & pop$sex == sex, ]
if (nrow(subset_df) > 0) {
breeding_pct <- breeding_rules(age, sex)
pop[pop$age == age & pop$sex == sex, "breeding_percentage"] <- breeding_pct
}
}
}
# Step 4: Simulate breeding for each age group
for (age in unique(pop$age)) {
males <- pop$ID[pop$age == age & pop$sex == "male"]
females <- pop$ID[pop$age == age & pop$sex == "female"]
# Perform breeding simulation (e.g., using sample())
# You can customize this step based on your breeding algorithm
# For example: randomly select pairs of males and females to breed
# Update the breeding percentage in the data frame accordingly
}
# Initialize vectors to track mating pairs
mating_pairs <- data.frame(MaleID = integer(0), FemaleID = integer(0)) #the mating_pairs data frame is initially empty, with two columns, MaleID and FemaleID, both of which are expected to contain integer values.
# Simulate the mating process for multiple generations
for (gen in 1:num_generations) {
# Select males to mate based on age and probabilities
selected_males <- sample(males$ID, size = length(females$ID), prob = mating_prob, replace = TRUE)
# Create mating pairs
mating_pairs_gen <- data.frame(MaleID = selected_males, FemaleID = females$ID)
# Append mating pairs to the overall list
mating_pairs <- rbind(mating_pairs, mating_pairs_gen)
# Simulate mating and producing offspring
offspring_sex <- sample(0:1, size = 1)  # Randomly assign offspring's sex
offspring[[mating_pairs]] <- c(offspring[[mating_pairs]], offspring_sex)
return(offspring)
}
# Step 1: Create the initial data frame
set.seed(123)  # Set a seed for reproducibility
num_individuals <- 100
pop <- data.frame(
ID = 1:num_individuals,
sex = sample(c("male", "female"), num_individuals, replace = TRUE),
age = sample(1:10, num_individuals, replace = TRUE),  # Assuming age ranges from 1 to 10
breeding_percentage = rep(0, num_individuals)  # Initialize breeding percentage to 0
)
# Step 2: Define rules for breeding percentage based on age
breeding_rules <- function(age, sex) {
if (sex == "male") {
return(0)  # Males do not contribute to breeding
} else {
# Define rules for females, e.g., increase breeding percentage with age
# You can customize this function based on your specific requirements
return(age * 5)  # Example: Breeding percentage increases by age * 5
}
}
# Step 3: Loop through ages and update breeding percentages
for(age in unique(pop$age)) {
for (sex in c("male", "female")) {
subset_df <- pop[pop$age == age & pop$sex == sex, ]
if (nrow(subset_df) > 0) {
breeding_pct <- breeding_rules(age, sex)
pop[pop$age == age & pop$sex == sex, "breeding_percentage"] <- breeding_pct
}
}
}
# Step 4: Simulate breeding for each age group
for (age in unique(pop$age)) {
males <- pop$ID[pop$age == age & pop$sex == "male"]
females <- pop$ID[pop$age == age & pop$sex == "female"]
# Perform breeding simulation (e.g., using sample())
# You can customize this step based on your breeding algorithm
# For example: randomly select pairs of males and females to breed
# Update the breeding percentage in the data frame accordingly
}
#Set working directory and out directory
setwd("~/GitHub/CaribouPopGen") #working directory from my documents> github folder> caribou pop gen folder with all the code
directory = getwd()
outdir = paste(directory, "/Output/", sep = "")   #  outdir = paste("C:/Users/ginab/Box/New Computer/Auburn/Data/ComplexModel_ABM", "/Output_local/", sep = "")
#Source function scripts
source(paste(directory, "/Source/FunctionSourcer.R", sep = ''))
#define location of project and groups for high performance computing cluster
prj = "_proj_"
grp = "_group_"
#parameters
k.V           = 100        #carrying capacity
nSNP.V        = 10         #number of SNPs simulated, used to track drift
miggy.V       = c(0,       #migration parameter type -- set in Migrate.R; 0 = no migration
"a",     #"a"=one mig per gen
"b",     #"b"=1xof50@175
"c",     #"c"=3xpf25@175|201|225
"d",     #"d"=
"e")     #"e"=
LBhet.V       = c(0.45, 0.07) #lowerbound limit for SOURCE POP -- called in RunModel.R
LBp.V         = c(0.45, 0.07) #lowerbound limit for FOCAL POP -- called in RunModel.R
maxage.V      = 13            #maximum age individuals can be
broodsize.V   = 1             #max number of caribou offspring, aka max fecundity
maturity.V    = 2             #age indv becomes reproductively mature
years.V       = 100           #total run time
r0.V          = 1             #per capita growth rate #0/1 is stable, <0/1 is decreasing, >0/1 is increasing - currently checking cuz r0+1 in log growth eq
nSNP.mig.V    = 10            #number of migrant specific alleles -- these are ADDITIONAL alleles to nSNP above, migrants = 1, orig pop = 0 -- called in RunModel.R and Breed.R
nSNP.cons.V   = 0             #number of conserved alleles within species -- used to track mutation
#generate list of parameter combinations
parameters = expand.grid(k.V, nSNP.V, miggy.V, LBhet.V, LBp.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
colnames(parameters) = c("k", "nSNP", "miggy", "LBhet", "LBp", "maxage", "broodsize", "maturity", "years", "r0", "nSNP.mig", "nSNP.cons")
write.table(parameters, paste(directory, "/Output/parameters__proj___group_.csv", sep=""), sep=",", col.names=TRUE, append=FALSE, quote=FALSE, row.names=FALSE)
#clean up, remember that these are still available in parameters
remove(k.V, nSNP.V, miggy.V, LBhet.V, LBp.V, maxage.V, broodsize.V, maturity.V, years.V, r0.V, nSNP.mig.V, nSNP.cons.V)
#on/off switches for functions
replicates    = 20
allee         = 0    #1=yes, 0=no, breeding restriction lower pop sizes becasue of lower chance of mates interacting which you set the number in matechoice
matemigs      = 0    #1=yes, 0=no, randomly asingns so mate at same freq
plotit        = 0    #1=yes, 0=no
plotit2       = 0    #1=yes, 0=no
mutate        = 1    #1=yes, 0=no   #average mammalian genome mutation rate is 2.2 x 10^-9 per base pair per year, https://doi.org/10.1073/pnas.022629899
#bannertailed krats = 0.0081 mutants/generation/locus, in Busch, Waser, and DeWoody 2007 doi: 10.1111/j.1365-294X.2007.03283.x.
mu            = 0.00000001  #mutation rate Gina said 10 to the -8
#bottleneck parameters
styr          = 101 #year to start pop decline, maintain pop size at k until start year
#run model iterating over parameters
theEND = NULL
repEND = NULL
finalPOP = NULL
FINAL = NULL
REP   = NULL
POP   = NULL
rr=1
#call parameters for this replicate run
k             = parameters$k[r]
nSNP          = parameters$nSNP[r]
miggy         = parameters$miggy[r] #found in Migrate.R
LBhet         = parameters$LBhet[r] #c(0.45, 0.07) #lowerbound limit for SOURCE POP
LBp           = parameters$LBp[r]   #c(0.45, 0.07) #lowerbound limit for FOCAL POP
nMicro        = parameters$nMicro[r]
maxage        = parameters$maxage[r]
broodsize     = parameters$broodsize[r]
maturity      = parameters$maturity[r]
years         = parameters$years[r]
r0            = parameters$r0[r]
r=1
#call parameters for this replicate run
k             = parameters$k[r]
nSNP          = parameters$nSNP[r]
miggy         = parameters$miggy[r] #found in Migrate.R
LBhet         = parameters$LBhet[r] #c(0.45, 0.07) #lowerbound limit for SOURCE POP
LBp           = parameters$LBp[r]   #c(0.45, 0.07) #lowerbound limit for FOCAL POP
nMicro        = parameters$nMicro[r]
maxage        = parameters$maxage[r]
broodsize     = parameters$broodsize[r]
maturity      = parameters$maturity[r]
years         = parameters$years[r]
r0            = parameters$r0[r]
popsize  = c(50,100)                    # population sizes to simulate
simyears = 100                          # total years to run the isolation portion of the simulation (does not include delay)
survival = 0.90                         # survival rate from literature I saw 85-90%
maxage   = 13                           # set maximum age based on caribou literature
#agecap   = seq(2, 102, 20)             # maximum age (2 to 102 using 20 year intervals in example)
maturity = 2                            # age of maturity to reproduce set at 2 years
reps     = 100                          # replicates
structK  = 3                            # number of K for structure analyses
levels   = seq(0, 500, 25)              # years to run structure
delay    = 100                           # number of years between initiation of large pop and isolation second pop
popsize  = c(50,100)                    # population sizes to simulate
simyears = 100                          # total years to run the isolation portion of the simulation (does not include delay)
survival = 0.90                         # survival rate from literature I saw 85-90%
maxage   = 13                           # set maximum age based on caribou literature
#agecap   = seq(2, 102, 20)             # maximum age (2 to 102 using 20 year intervals in example)
maturity = 2                            # age of maturity to reproduce set at 2 years
reps     = 100                          # replicates
structK  = 3                            # number of K for structure analyses
levels   = seq(0, 500, 25)              # years to run structure
delay    = 100                           # number of years between initiation of large pop and isolation second pop
RunSims(alleles, allelefreqs, popsize, simyears, survival, agecap, reps, structK, levels, delay)
##################################################################################
#initialize population                   #matrix is easier to manipulate than a dataframe -- "ncol = X + (nloci)*2
pop = matrix(nrow=k, ncol=9)            #each individual gets its own row
# colnames(pop) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness", "prop migrant SNPs") #just to give a better understanding of what these variables are, set names
colnames(pop) <- c("id", "age", "sex", "subgroup","relative fitness", "prop migrant SNPs", "sub born", "sub died", "alive", "n adult offspring")
pop[,1] = seq(1,k,1)                     #each individual has unique ID name; sequence starting at 1, through k, with each 1 iteration
# pop[,2:3] = 0                            #parent ID; at this point, we are putting all equal to zero because this is the initial generation and we don't know parents
pop[,2] = rpois(k,maturity)-1            #set age with a poisson distribution around the age of maturity and subtract 1 because we age as the first step in the simulation   #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1  #FOR RANDOM DIST: sample(seq(0,maxage,1),k,replace=T)-1
# pop[,3] = sample(c(0,1),k,replace=T)     #assign indvs as male (1) or female (0)
pop[, 3] <- sample(c(0, 1), size = k, replace = TRUE, prob = c(1 - male_ratio, male_ratio))  # Generate males and females with the desired ratio, each individual assigned male (1) or female (0)
pop[,4] = sample(c("E","W"), k, replace=T) #assigns indvs as East of West subgroups? this should be something I can change
# pop[,6] = NA                             #this will be for number of times as a parent - calculated in RepSucc.R
#pop[,7] = NA                             #this will be for number of offspring survive to maturity - calculated in RepSucc.R
pop[,9] = 1                              #alive or dead? alive = 1, dead = 0
pop[,7] = 0                              #thinking subgroup born? Gina added generation born
pop[,8] = 0                             #thinking subgroup died? gina added generation died
pop[,5] = NA                            #relative fitness, aka heterozygosity *of nSNP only* - calculated below
pop[,6] = 0                             #proportion of migrant SNPs - initial pop will all be 0
pop[,10] = NA                             #for number of offspring that reach maturity
sz = k                                   #to keep track of the number of indv for ID'ing later
sz_col = ncol(pop)
#generate SNPs for the starting pop
popgen = matrix(nrow=k, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)  #create 2 columns per SNP with 0-1 for each allele
for(l in 1:nSNP){
p = sample(seq(from=LBp, to=(LBp+0.1), by=0.01),1)  #introduce variation by selecting p, range defined in Cover.R
#create pool of genotypes in HWE to select from
pool = c(rep(0, round(k*p*p, 0)),                                      #homozygous p*p
rep(1, round(k*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, k-(round(k*p*p, 0)+(round(k*(1-p)*(1-p), 0))))         #heterozygous
)
#connect pool to indvs and assign the genotypes
gtype = sample(pool, k, replace = FALSE)
for(kk in 1:k){
if(gtype[kk]==0){                 #homo (0,0)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 0
next
}else if(gtype[kk]==2){           #hetero (0,1)
popgen[kk,columns[l]]   = 0
popgen[kk,columns[l]+1] = 1
}else{                            #homo (1,1)
popgen[kk,columns[l]]   = 1
popgen[kk,columns[l]+1] = 1
}
}
pool = NULL  #nullify the variable for use in generating source genotypes below
}
#calculate heterozygosity values for generated genotypes - NOTE this is across nSNPs only
het <- matrix(nrow=nrow(popgen), ncol=1)
for(g in 1:nrow(popgen)){
w <- sum(popgen[g ,seq(1,ncol(popgen),2)]!=popgen[g,seq(2,ncol(popgen),2)])/(ncol(popgen)/2)   #add up number of hetero sites per number of SNPs
het[g,1] <- w
}
pop[,5] <- het  #fill in calculated heterozygosities in the pop matrix
# #create migrant and nonmigrant unique SNPs - will be used to follow migrant ancestry
# popSNPs = matrix(nrow=k, ncol=nSNP.mig*2)
# columnsb = seq(1,(nSNP.mig*2),2)
# for(b in 1:nrow(popSNPs)){    #set up similar to above in case change the sequence or format later
#   popSNPs[b,] = 0             #all focal pop indv have nSNP.mig = 0
}
#REMOVE###create conserved SNPs - will be used to follow mutation
#REMOVE##conSNPs = matrix(nrow=k, ncol=nSNP.cons*2)
#REMOVE##columnsc = seq(1,(nSNP.cons*2),2)
#REMOVE##for(c in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE##  conSNPs[c,] = 0    #all indv of the species have nSNP.cons = 0
#REMOVE##}
#REMOVE##focalpop <- cbind(pop, popgen, popSNPs, conSNPs)   ##use this when generating all 3 types of SNPs
focalpop <- cbind(pop, popgen, popSNPs)
pop <- focalpop
#write starting pop to table
####REMOVED### write.table(pop, paste(directory, "/Output/focal_population", r, ".csv", sep=""), sep=",", col.names=T, row.names=F)
#clean up
remove(popgen, popSNPs, het, b, g, w, columns, columnsb, gtype, kk, l, pool) #focalpop, conSNPs
########################################################
################# SOURCE POP, this would be the sub populations
#initialize source population
source = matrix(nrow=s, ncol=12)            #each individual gets its own row.
colnames(source) <- c("id", "mom", "dad", "age", "sex", "n offspring", "n adult offspring", "alive", "gen born", "gen died", "relative fitness", "prop migrant SNPs") #just to give a better understanding of what these variables are, set names
source[,1] = seq(-(s),-1,1)                 #each individual has unique ID name; sequence starting at -1, through -k, with each 1 iteration, negative flag for source pop
source[,2:3] = -1                           #at this point, we are putting all equal to negative 1 to flag from source pop, and we dont know parents because parents arent in focal pop
source[,4] = sample(seq(0,maxage,1),s,replace=T)   #set age between 0 and maxage (source isnt aged, so dont subtract 1)
source[,5] = sample(c(0,1),s,replace=T)     #each individual assigned male (1) or female (0)
source[,6] = NA                             #this will be for number of times as a parent
source[,7] = NA                             #for number of offspring that reach maturity
source[,8] = 1                              #alive or dead? alive = 1, dead = 0
source[,9] = -1                             #generation born - will be changed in Migrate.R to the generation entered focal pop
source[,10] = 0                             #generation died
source[,11] = NA                            #relative fitness, aka heterozygosity *of nSNP only* - calculated below
source[,12] = 1                             #proportion of migrant SNPs - initial source pop will all be 1
#generate source gentoypes
sourcegen = matrix(nrow=s, ncol=nSNP*2)
columns = seq(1,(nSNP*2),2)  #create 2 columns per SNP with 0-1 for each allele
for(l in 1:nSNP){
p = sample(seq(from=LBhet, to=(LBhet+0.1), by=0.01), 1)  #introduce variation by selecting p, range defined in Cover.R
#create pool of genotypes in HWE
pool = c(rep(0, round(s*p*p, 0)),                                      #homozygous p*p
rep(1, round(s*(1-p)*(1-p), 0)),                              #homozygous (1-p)*(1-p)
rep(2, s-(round(s*p*p, 0)+(round(s*(1-p)*(1-p), 0))))         #heterozygous
)
#connect pool to indvs and assign the genotypes
gtype = sample(pool, s, replace = FALSE)
for(ss in 1:s){
if(gtype[ss]==0){                 #homo (0,0)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 0
next
}else if(gtype[ss]==2){           #hetero (0,1)
sourcegen[ss,columns[l]]   = 0
sourcegen[ss,columns[l]+1] = 1
}else{                            #homo (1,1)
sourcegen[ss,columns[l]]   = 1
sourcegen[ss,columns[l]+1] = 1
}
}
}
#calculate heterozygosity values for generated genotypes - NOTE this is across nSNPs only
sourcehet <- matrix(nrow=nrow(sourcegen), ncol=1)
for(j in 1:nrow(sourcegen)){
z <- sum(sourcegen[j ,seq(1,ncol(sourcegen),2)]!=sourcegen[j,seq(2,ncol(sourcegen),2)])/(ncol(sourcegen)/2)  #add up number of hetero sites per number of SNPs
sourcehet[j,1] <- z
}
source[,11] <- sourcehet  #fill in calculated heterozygosities in the source matrix
#create migrant and nonmigrant unique SNPs - used to track migrant ancestry
migSNPs = matrix(nrow=s, ncol=nSNP.mig*2)
columnsd= seq(1,(nSNP.mig*2),2)
for(d in 1:nrow(migSNPs)){    #set up similar to above in case change the sequence or format later
migSNPs[d,] = 1              #all source pop indv have nSNP.mig = 1
}
#REMOVE###create conserved SNPs - used to track mutation
#REMOVE##conSNPs = matrix(nrow=s, ncol=nSNP.cons*2)
#REMOVE##columnse = seq(1,(nSNP.cons*2),2)
#REMOVE##for(e in 1:nrow(conSNPs)){    #set up similar to above in case change the sequence or format later
#REMOVE##  conSNPs[e,] = 0             #all indv of the species have nSNP.cons = 0
#REMOVE##}
#REMOVE##source1 <- cbind(source, sourcegen, migSNPs, conSNPs)   ##use this when generating all 3 types of SNPs
source1 <- cbind(source, sourcegen, migSNPs)
source <- source1
y=1
