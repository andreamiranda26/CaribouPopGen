if(!is.null(nrow(pop))){                                           #I added as numeric because it was giving me this error: Error in pop[, 4] + 1 : non-numeric argument to binary operator
pop[,4] = as.numeric(pop[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
pop<- rbind(pop,dead)                                  #recall dead indvs
remove(dead)                                           #clean up
return(pop)
}
dead = source[source[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(dead)>= 1){
source = source[-which(source[,1]%in%dead), , drop=FALSE]     #remove dead indvs
}
if(!is.null(nrow(source))){
source[,4] = source[,4] + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
source[,4] = as.numeric(source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
if(!is.null(nrow(source))){
source[,4] = as.numeric(source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
source<- rbind(source,dead)                                  #recall dead indvs
remove(dead)                                           #clean up
return(source)
#this will impose an increased in probability of death with increasing age AND kill indv over the maxage
AgeDeath = function(pop, maxage, y){
dead = pop[pop[,8] == 0, , drop=FALSE]          #remove dead indvs
pop = pop[pop[,8] == 1, , drop=FALSE]                  #isolate alive
babes = pop[pop[,4] == 0, , drop=FALSE]      #remove babies from chance of dying
pop = pop[pop[,4] != 0, , drop=FALSE]      #isolate those that are not newly generated babies
if(nrow(pop) > 1){
for(ee in 1:nrow(pop)){
age = pop[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
}
nkilled = NULL
nkilled = pop[pop[,8]==0,,drop=FALSE]
totalkilled = nrow(nkilled)   #consider if you want to track this for Analyze.R
print(paste("killed", totalkilled, "individuals"))
}else{
print(paste("no killing in AgeDeath"))
}
#combine pop and previously removed dead indv
pop = rbind(pop, babes, dead)
#if(nrow(alreadydead) >= 1){
#pop = rbind(pop,alreadydead)
#}
remove(babes, dead, nkilled, totalkilled, age)
return(pop)
}
dead = pop[pop[,8] == 0, , drop=FALSE]          #remove dead indvs
pop = pop[pop[,8] == 1, , drop=FALSE]                  #isolate alive
babes = pop[pop[,4] == 0, , drop=FALSE]      #remove babies from chance of dying
pop = pop[pop[,4] != 0, , drop=FALSE]      #isolate those that are not newly generated babies
if(nrow(pop) > 1){
for(ee in 1:nrow(pop)){
age = pop[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
}
nkilled = NULL
nkilled = pop[pop[,8]==0,,drop=FALSE]
totalkilled = nrow(nkilled)   #consider if you want to track this for Analyze.R
print(paste("killed", totalkilled, "individuals"))
}else{
print(paste("no killing in AgeDeath"))
}
for(ee in 1:nrow(pop)){
age = pop[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
}
nkilled = NULL
nkilled = pop[pop[,8]==0,,drop=FALSE]
totalkilled = nrow(nkilled)   #consider if you want to track this for Analyze.R
print(paste("killed", totalkilled, "individuals"))
if(nrow(pop) > 1){
for(ee in 1:nrow(pop)){
age = pop[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
}
nkilled = NULL
nkilled = pop[pop[,8]==0,,drop=FALSE]
totalkilled = nrow(nkilled)   #consider if you want to track this for Analyze.R
print(paste("killed", totalkilled, "individuals"))
}else{
print(paste("no killing in AgeDeath"))
}
#combine pop and previously removed dead indv
pop = rbind(pop, babes, dead)
remove(babes, dead, nkilled, totalkilled, age)
return(pop)
#new parameters:
styr          = 100 #year to start pop for stabilizing
PopSizeNext = function(pop, k, r0, maturity, y, styr, parameters, r, K){
dead = pop[pop[,8] == 0, , drop=FALSE]                 #remove dead indv
alive = pop[which(pop[,1]%NOTin%dead), , drop = FALSE]
#since only returning numboff, dont need to rbind dead and alive into pop
#pop = pop[pop[,4] >= maturity, , drop=FALSE]          #isolate adults -- if only want effective pop size to count here
#if only using adults, remove immature
#calculate the current population size following aging and death
###REMOVED# Nt = nrow(pop) #use this if removing dead from pop
Nt = nrow(alive)
if(y < styr){               #maintain k for the burn in period
K = k
R0 = r0
# }else if(y > edyr + dur){
#   deltaK = abs(round((k - nwk)/(styr - edyr)))
#   K = K + deltaK
#   R0 = r0
if(K > parameters$k[r]){  #check to make sure K is not greater than the original k in Cover.R
K <- parameters$k[r]
}
# }else if(styr <= y & y < edyr){ #change K to push pop into bottleneck
#   deltaK = round(abs(k - nwk)/(styr - edyr)) #this is the change in K per year for the decline period
#   #note, deltaK will be negative when pop is decreasing
#
#   K = K + deltaK
#
# }else{                       #if during the duration period of bottleneck, maintain small pop size
#   K = nwk
#   R0 = r0/2    #introduce allee effect, but only at lowest pop size
}
#calculate the new pop size with the logistic growth equation
Ntt = Nt*(1+R0*(1-(Nt/K))) #logistic
#r0 is the per capita growth rate, set as a parameter in Cover.R
#add Density Independent variance in growth
Nt1 = round(rnorm(1, Ntt, 1), 0)
Nt1 = as.integer(Nt1)
print(paste("The next generation's population size will be", Nt1, "K is", K, "k is", k))
#determine the number of additional offspring to produce
numboff = Nt1 - Nt
#for some reason numboff is a double and causing problems
#turn numboff into an integer
numboff = as.integer(numboff)
print(paste("the number of offspring needed is", numboff))
remove(alive, dead)
return(list(numboff,K))
}
dead = pop[pop[,8] == 0, , drop=FALSE]                 #remove dead indv
alive = pop[which(pop[,1]%NOTin%dead), , drop = FALSE]
#calculate the current population size following aging and death
###REMOVED# Nt = nrow(pop) #use this if removing dead from pop
Nt = nrow(alive)
if(y < styr){               #maintain k for the burn in period
K = k
R0 = r0
# }else if(y > edyr + dur){
#   deltaK = abs(round((k - nwk)/(styr - edyr)))
#   K = K + deltaK
#   R0 = r0
if(K > parameters$k[r]){  #check to make sure K is not greater than the original k in Cover.R
K <- parameters$k[r]
}
# }else if(styr <= y & y < edyr){ #change K to push pop into bottleneck
#   deltaK = round(abs(k - nwk)/(styr - edyr)) #this is the change in K per year for the decline period
#   #note, deltaK will be negative when pop is decreasing
#
#   K = K + deltaK
#
# }else{                       #if during the duration period of bottleneck, maintain small pop size
#   K = nwk
#   R0 = r0/2    #introduce allee effect, but only at lowest pop size
}
K = k
R0 = r0
if(K > parameters$k[r]){  #check to make sure K is not greater than the original k in Cover.R
K <- parameters$k[r]
}
#calculate the new pop size with the logistic growth equation
Ntt = Nt*(1+R0*(1-(Nt/K))) #logistic
#add Density Independent variance in growth
Nt1 = round(rnorm(1, Ntt, 1), 0)
Nt1 = as.integer(Nt1)
print(paste("The next generation's population size will be", Nt1, "K is", K, "k is", k))
#determine the number of additional offspring to produce
numboff = Nt1 - Nt
#for some reason numboff is a double and causing problems
#turn numboff into an integer
numboff = as.integer(numboff)
print(paste("the number of offspring needed is", numboff))
remove(alive, dead)
return(list(numboff,K))
if(!is.null(nrow(pop))){                                           #I added as numeric because it was giving me this error: Error in pop[, 4] + 1 : non-numeric argument to binary operator
pop[,4] = as.numeric(pop[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
if(!is.null(nrow(source))){
source[,4] = (source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
head(source)
AgeUp = function(pop, source){
dead = pop[pop[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(dead)>= 1){
pop = pop[-which(pop[,1]%in%dead), , drop=FALSE]     #remove dead indvs
}
# if(!is.numeric(pop[, 4])) {
#   pop[, 4] <- as.numeric(pop[, 4])
# }
if(!is.null(nrow(pop))){                                           #I added as numeric because it was giving me this error: Error in pop[, 4] + 1 : non-numeric argument to binary operator
pop[,4] = as.numeric(pop[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
pop<- rbind(pop,dead)                                  #recall dead indvs
remove(dead)                                           #clean up
return(pop)
}
dead = pop[pop[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(dead)>= 1){
pop = pop[-which(pop[,1]%in%dead), , drop=FALSE]     #remove dead indvs
}
if(!is.null(nrow(pop))){                                           #I added as numeric because it was giving me this error: Error in pop[, 4] + 1 : non-numeric argument to binary operator
pop[,4] = as.numeric(pop[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
pop<- rbind(pop,dead)                                  #recall dead indvs
remove(dead)                                           #clean up
return(pop)
AgeUp = function(pop, source){
dead = pop[pop[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(dead)>= 1){
pop = pop[-which(pop[,1]%in%dead), , drop=FALSE]     #remove dead indvs
}
# if(!is.numeric(pop[, 4])) {
#   pop[, 4] <- as.numeric(pop[, 4])
# }
if(!is.null(nrow(pop))){                                           #I added as numeric because it was giving me this error: Error in pop[, 4] + 1 : non-numeric argument to binary operator
pop[,4] = as.numeric(pop[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
pop<- rbind(pop,dead)                                  #recall dead indvs
remove(dead)                                           #clean up
return(pop)
}
deads = source[source[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(dead)>= 1){
source = source[-which(source[,1]%in%dead), , drop=FALSE]     #remove dead indvs
}
if(!is.null(nrow(source))){
source[,4] = (source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
deadS = source[source[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(deadS)>= 1){
source = source[-which(source[,1]%in%deadS), , drop=FALSE]     #remove dead indvs
}
if(!is.null(nrow(source))){
source[,4] = (source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
source<- rbind(source,deadS)                                  #recall dead indvs
remove(deadS)                                           #clean up
return(source)                                         #error at this point: Error: no function to return from, jumping to top level
if(!is.null(nrow(source))){
source[,4] = as.numeric(source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
source<- rbind(source,deadS)                                  #recall dead indvs
deadS = source[source[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(deadS)>= 1){
source = source[-which(source[,1]%in%deadS), , drop=FALSE]     #remove dead indvs
}
if(!is.null(nrow(source))){
source[,4] = as.numeric(source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
source<- rbind(source,deadS)                                  #recall dead indvs
remove(deadS)                                           #clean up
return(source)                                         #error at this point: Error: no function to return from, jumping to top level
source("~/GitHub/CaribouPopGen/Breed.R")
source("~/GitHub/CaribouPopGen/Breed.R")
AgeUp = function(pop, source){
dead = pop[pop[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(dead)>= 1){
pop = pop[-which(pop[,1]%in%dead), , drop=FALSE]     #remove dead indvs
}
# if(!is.numeric(pop[, 4])) {
#   pop[, 4] <- as.numeric(pop[, 4])
# }
if(!is.null(nrow(pop))){                                           #I added as numeric because it was giving me this error: Error in pop[, 4] + 1 : non-numeric argument to binary operator
pop[,4] = as.numeric(pop[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
pop<- rbind(pop,dead)                                  #recall dead indvs
remove(dead)                                           #clean up
sdeadS = source[source[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(sdeadS)>= 1){
source = source[-which(source[,1]%in%sdeadS), , drop=FALSE]     #remove dead indvs
}
if(!is.null(nrow(source))){
source[,4] = as.numeric(source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
source<- rbind(source,deadS)                                  #recall dead indvs
remove(sdeadS)                                            #clean up
return(pop,source)                                         #might give error at this point: Error: no function to return from, jumping to top level, ignore this error when debugging!
}
dead = pop[pop[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(dead)>= 1){
pop = pop[-which(pop[,1]%in%dead), , drop=FALSE]     #remove dead indvs
}
if(!is.null(nrow(pop))){                                           #I added as numeric because it was giving me this error: Error in pop[, 4] + 1 : non-numeric argument to binary operator
pop[,4] = as.numeric(pop[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
pop<- rbind(pop,dead)                                  #recall dead indvs
remove(dead)                                           #clean up
sdeadS = source[source[,8] == 0, , drop=FALSE]                 #define dead indvs use the "alive" parameter in RunModel.R
if(nrow(sdeadS)>= 1){
source = source[-which(source[,1]%in%sdeadS), , drop=FALSE]     #remove dead indvs
}
if(!is.null(nrow(source))){
source[,4] = as.numeric(source[,4]) + 1                                #add one year to all live indv's ages this is a two in RunModel.R
}
source<- rbind(source,deadS)                                  #recall dead indvs
source<- rbind(source,sdeadS)                                  #recall dead indvs
remove(sdeadS)                                            #clean up
return(pop,source)                                         #might give error at this point: Error: no function to return from, jumping to top level, ignore this error when debugging!
dead = pop[pop[,8] == 0, , drop=FALSE]          #remove dead indvs
pop = pop[pop[,8] == 1, , drop=FALSE]                  #isolate alive
babes = pop[pop[,4] == 0, , drop=FALSE]      #remove babies from chance of dying
pop = pop[pop[,4] != 0, , drop=FALSE]      #isolate those that are not newly generated babies
dead = pop[pop[,8] == 0, , drop=FALSE]          #remove dead indvs
pop = pop[pop[,8] == 1, , drop=FALSE]                  #isolate alive
babes = pop[pop[,4] == 0, , drop=FALSE]      #remove babies from chance of dying
pop = pop[pop[,4] != 0, , drop=FALSE]      #isolate those that are not newly generated babies
if(nrow(pop) > 1){
for(ee in 1:nrow(pop)){
age = pop[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
}
nkilled = NULL
nkilled = pop[pop[,8]==0,,drop=FALSE]
totalkilled = nrow(nkilled)   #consider if you want to track this for Analyze.R
print(paste("killed", totalkilled, "individuals"))
}else{
print(paste("no killing in AgeDeath"))
}
maxage.V      = 13            #maximum age individuals can be
pop[,4] = as.numeric(rpois(k,maturity)) - 1         #set age with a poisson distribution around the age of maturity (although i had to change to a numner 2 since maturity was giving me errors) and subtract 1 because we age as the first step in the simulation   #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1  #FOR RANDOM DIST: sample(seq(0,maxage,1),k,replace=T)-1
pop
n
pop[,4] = as.numeric(rpois(k,maturity) - 1)         #set age with a poisson distribution around the age of maturity (although i had to change to a numner 2 since maturity was giving me errors) and subtract 1 because we age as the first step in the simulation   #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1  #FOR RANDOM DIST: sample(seq(0,maxage,1),k,replace=T)-1
pop
pop[,4] = rpois(k,maturity) - 1         #set age with a poisson distribution around the age of maturity (although i had to change to a numner 2 since maturity was giving me errors) and subtract 1 because we age as the first step in the simulation   #FOR UNIFORM DIST: dunif(k, min =0, max = maturity, log = FALSE)-1  #FOR RANDOM DIST: sample(seq(0,maxage,1),k,replace=T)-1
if(nrow(pop) > 1){
for(ee in 1:nrow(pop)){
age = pop[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
}
nkilled = NULL
nkilled = pop[pop[,8]==0,,drop=FALSE]
totalkilled = nrow(nkilled)   #consider if you want to track this for Analyze.R
print(paste("killed", totalkilled, "individuals"))
}else{
print(paste("no killing in AgeDeath"))
}
#parameters
k.V           = 100        #carrying capacity
nSNP.V        = 10         #number of SNPs simulated, used to track drift
miggy.V       = c(0,       #migration parameter type -- set in Migrate.R; 0 = no migration
"a",     #"a"=one mig per gen
"b",     #"b"=1xof50@175
"c",     #"c"=3xpf25@175|201|225
"d",     #"d"=
"e")     #"e"=
LBhet.V       = 0.5           #Gina had c(0.45, 0.07) as lowerbound limit for SOURCE POP -- called in RunModel.R BUT I just did HWE and put .5
LBp.V         = 0.5           #c(0.45, 0.07) Gina had this lowerbound limit for FOCAL POP -- called in RunModel.R
maxage.V      = 13            #maximum age individuals can be
broodsize.V   = 1             #max number of caribou offspring, aka max fecundity
maturity.V    = 2             #age indv becomes reproductively mature
years.V       = 100           #total run time
r0.V          = 1             #per capita growth rate #0/1 is stable, <0/1 is decreasing, >0/1 is increasing - currently checking cuz r0+1 in log growth eq
nSNP.mig.V    = 10            #number of migrant specific alleles -- these are ADDITIONAL alleles to nSNP above, migrants = 1, orig pop = 0 -- called in RunModel.R and Breed.R
nSNP.cons.V   = 0             #number of conserved alleles within species -- used to track mutation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = as.numeric(c(age/maxage,(1-(age/maxage)))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
for(ee in 1:nrow(pop)){
age = pop[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
}
nkilled = NULL
nkilled = pop[pop[,8]==0,,drop=FALSE]
totalkilled = nrow(nkilled)   #consider if you want to track this for Analyze.R
print(paste("killed", totalkilled, "individuals"))
if(nrow(pop) > 1){
for(ee in 1:nrow(pop)){
age = pop[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
pop[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(pop[ee,8]==0){
pop[ee,10] = y    #this is to put year died if I create that column
}
}
nkilled = NULL
nkilled = pop[pop[,8]==0,,drop=FALSE]
totalkilled = nrow(nkilled)   #consider if you want to track this for Analyze.R
print(paste("killed", totalkilled, "individuals"))
}else{
print(paste("no killing in AgeDeath"))
}
#combine pop and previously removed dead indv
pop = rbind(pop, babes, dead)
remove(babes, dead, nkilled, totalkilled, age)
sdeadS = source[source[,8] == 0, , drop=FALSE]          #remove dead indvs
source = source[source[,8] == 1, , drop=FALSE]                  #isolate alive
Sbabes = source[source[,4] == 0, , drop=FALSE]      #remove babies from chance of dying
source = source[source[,4] != 0, , drop=FALSE]      #isolate those that are not newly generated babies
if(nrow(source) > 1){
for(ee in 1:nrow(source)){
age = source[ee,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
source[ee,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(age/maxage,(1-(age/maxage))))
if(source[ee,8]==0){
source[ee,10] = y    #this is to put year died if I create that column
}
}
snkilled = NULL
snkilled = source[source[,8]==0,,drop=FALSE]
stotalkilled = nrow(snkilled)   #consider if you want to track this for Analyze.R
print(paste("skilled", stotalkilled, "sindividuals"))
}else{
print(paste("s no killing in AgeDeath"))
}
#combine pop and previously removed dead indv
source = rbind(source, sbabes, sdeadS)
sbabes = source[source[,4] == 0, , drop=FALSE]      #remove babies from chance of dying
source = source[source[,4] != 0, , drop=FALSE]      #isolate those that are not newly generated babies
sdeadS = source[source[,8] == 0, , drop=FALSE]          #remove dead indvs
source = source[source[,8] == 1, , drop=FALSE]                  #isolate alive
sbabes = source[source[,4] == 0, , drop=FALSE]      #remove babies from chance of dying
source = source[source[,4] != 0, , drop=FALSE]      #isolate those that are not newly generated babies
if(nrow(source) > 1){
for(see in 1:nrow(source)){
sage = source[see,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
source[see,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(sage/maxage,(1-(sage/maxage))))
if(source[see,8]==0){
source[see,10] = y    #this is to put year died if I create that column
}
}
snkilled = NULL
snkilled = source[source[,8]==0,,drop=FALSE]
stotalkilled = nrow(snkilled)   #consider if you want to track this for Analyze.R
print(paste("skilled", stotalkilled, "sindividuals"))
}else{
print(paste("s no killing in AgeDeath"))
}
#combine pop and previously removed dead indv
source = rbind(source, sbabes, sdeadS)
remove(sbabes, sdeadS, snkilled, stotalkilled, sage)
l
l
snkilled = NULL
snkilled = source[source[,8]==0,,drop=FALSE]
stotalkilled = nrow(snkilled)   #consider if you want to track this for Analyze.R
print(paste("skilled", stotalkilled, "sindividuals"))
if(nrow(source) > 1){
for(see in 1:nrow(source)){
sage = source[see,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
source[see,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(sage/maxage,(1-(sage/maxage))))
if(source[see,8]==0){
source[see,10] = y    #this is to put year died if I create that column
}
}
snkilled = NULL
snkilled = source[source[,8]==0,,drop=FALSE]
stotalkilled = nrow(snkilled)   #consider if you want to track this for Analyze.R
print(paste("skilled", stotalkilled, "sindividuals"))
}else{
print(paste("s no killing in AgeDeath"))
}
#combine pop and previously removed dead indv
source = rbind(source, sbabes, sdeadS)
sdeadS = source[source[,8] == 0, , drop=FALSE]          #remove dead indvs
source = source[source[,8] == 1, , drop=FALSE]                  #isolate alive
sbabes = source[source[,4] == 0, , drop=FALSE]      #remove babies from chance of dying
source = source[source[,4] != 0, , drop=FALSE]      #isolate those that are not newly generated babies
if(nrow(source) > 1){
for(see in 1:nrow(source)){
sage = source[see,4] #+0.000001 #this controls for if age = 0 in source migrants in that generation
source[see,8] = sample(x=c(0,1), size = 1, replace = TRUE, prob = c(sage/maxage,(1-(sage/maxage))))
if(source[see,8]==0){
source[see,10] = y    #this is to put year died if I create that column
}
}
snkilled = NULL
snkilled = source[source[,8]==0,,drop=FALSE]
stotalkilled = nrow(snkilled)   #consider if you want to track this for Analyze.R
print(paste("skilled", stotalkilled, "sindividuals"))
}else{
print(paste("s no killing in AgeDeath"))
}
remove(sbabes, sdeadS, snkilled, stotalkilled, sage)
return(pop, source)
mig = 16  #but this would be 16 individuals from 100 in the source?
print(paste("there are", mig, "migrants this year"))
for(m in 1:mig){
#select migrant without replacement
migrant = sample(1:nrow(source), 1, replace = F)
source[migrant,9] <- y   #change gen born to the generation the migrant entered the pop
#Gina wrote this as 9 as generation born
#take migrant from source and put into pop
pop = rbind(pop, source[migrant,])
#remove migrant from source
source = source[-migrant,]
}
